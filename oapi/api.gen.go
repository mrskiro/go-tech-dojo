// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// CharacterListResponse defines model for CharacterListResponse.
type CharacterListResponse struct {
	Characters *[]UserCharacter `json:"characters,omitempty"`
}

// GachaDrawRequest defines model for GachaDrawRequest.
type GachaDrawRequest struct {
	// 実行回数
	Times *string `json:"times,omitempty"`
}

// GachaDrawResponse defines model for GachaDrawResponse.
type GachaDrawResponse struct {
	Results *[]GachaResult `json:"results,omitempty"`
}

// GachaResult defines model for GachaResult.
type GachaResult struct {
	// キャラクターID
	CharacterID *string `json:"characterID,omitempty"`

	// キャラクター名
	Name *string `json:"name,omitempty"`
}

// UserCharacter defines model for UserCharacter.
type UserCharacter struct {
	// キャラクターID
	CharacterID *string `json:"characterID,omitempty"`

	// キャラクター名
	Name *string `json:"name,omitempty"`

	// ユニークID
	UserCharacterID *string `json:"userCharacterID,omitempty"`
}

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// ユーザ名
	Name *string `json:"name,omitempty"`
}

// UserCreateResponse defines model for UserCreateResponse.
type UserCreateResponse struct {
	// クライアント側で保存するトークン
	Token *string `json:"token,omitempty"`
}

// UserGetResponse defines model for UserGetResponse.
type UserGetResponse struct {
	// ユーザ名
	Name *string `json:"name,omitempty"`
}

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	// ユーザ名
	Name *string `json:"name,omitempty"`
}

// GetCharacterListParams defines parameters for GetCharacterList.
type GetCharacterListParams struct {
	// 認証トークン
	XToken string `json:"x-token"`
}

// PostGachaDrawJSONBody defines parameters for PostGachaDraw.
type PostGachaDrawJSONBody GachaDrawRequest

// PostGachaDrawParams defines parameters for PostGachaDraw.
type PostGachaDrawParams struct {
	// 認証トークン
	XToken string `json:"x-token"`
}

// PostUserCreateJSONBody defines parameters for PostUserCreate.
type PostUserCreateJSONBody UserCreateRequest

// GetUserGetParams defines parameters for GetUserGet.
type GetUserGetParams struct {
	// 認証トークン
	XToken string `json:"x-token"`
}

// PutUserUpdateJSONBody defines parameters for PutUserUpdate.
type PutUserUpdateJSONBody UserUpdateRequest

// PutUserUpdateParams defines parameters for PutUserUpdate.
type PutUserUpdateParams struct {
	// 認証トークン
	XToken string `json:"x-token"`
}

// PostGachaDrawJSONRequestBody defines body for PostGachaDraw for application/json ContentType.
type PostGachaDrawJSONRequestBody PostGachaDrawJSONBody

// PostUserCreateJSONRequestBody defines body for PostUserCreate for application/json ContentType.
type PostUserCreateJSONRequestBody PostUserCreateJSONBody

// PutUserUpdateJSONRequestBody defines body for PutUserUpdate for application/json ContentType.
type PutUserUpdateJSONRequestBody PutUserUpdateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザ所持キャラクター一覧取得API
	// (GET /character/list)
	GetCharacterList(w http.ResponseWriter, r *http.Request, params GetCharacterListParams)
	// ガチャ実行API
	// (POST /gacha/draw)
	PostGachaDraw(w http.ResponseWriter, r *http.Request, params PostGachaDrawParams)
	// ユーザ情報作成API
	// (POST /user/create)
	PostUserCreate(w http.ResponseWriter, r *http.Request)
	// ユーザ情報取得API
	// (GET /user/get)
	GetUserGet(w http.ResponseWriter, r *http.Request, params GetUserGetParams)
	// ユーザ情報更新API
	// (PUT /user/update)
	PutUserUpdate(w http.ResponseWriter, r *http.Request, params PutUserUpdateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetCharacterList operation middleware
func (siw *ServerInterfaceWrapper) GetCharacterList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCharacterListParams

	headers := r.Header

	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-token", runtime.ParamLocationHeader, valueList[0], &XToken)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-token", Err: err})
			return
		}

		params.XToken = XToken

	} else {
		err := fmt.Errorf("Header parameter x-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCharacterList(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostGachaDraw operation middleware
func (siw *ServerInterfaceWrapper) PostGachaDraw(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGachaDrawParams

	headers := r.Header

	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-token", runtime.ParamLocationHeader, valueList[0], &XToken)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-token", Err: err})
			return
		}

		params.XToken = XToken

	} else {
		err := fmt.Errorf("Header parameter x-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGachaDraw(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUserCreate operation middleware
func (siw *ServerInterfaceWrapper) PostUserCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserGet operation middleware
func (siw *ServerInterfaceWrapper) GetUserGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserGetParams

	headers := r.Header

	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-token", runtime.ParamLocationHeader, valueList[0], &XToken)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-token", Err: err})
			return
		}

		params.XToken = XToken

	} else {
		err := fmt.Errorf("Header parameter x-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGet(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutUserUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutUserUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutUserUpdateParams

	headers := r.Header

	// ------------- Required header parameter "x-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-token")]; found {
		var XToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-token", runtime.ParamLocationHeader, valueList[0], &XToken)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-token", Err: err})
			return
		}

		params.XToken = XToken

	} else {
		err := fmt.Errorf("Header parameter x-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUserUpdate(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/character/list", wrapper.GetCharacterList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gacha/draw", wrapper.PostGachaDraw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/create", wrapper.PostUserCreate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/get", wrapper.GetUserGet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/update", wrapper.PutUserUpdate)
	})

	return r
}
